
kube-burner-config:
  content: |
    ---
    global:
      writeToFile: true
      metricsDirectory: collected-metrics
      indexerConfig:
        enabled: false
        # esServers: [http://elastic-elk.apps.rsevilla.kube-burner.com]
        # insecureSkipVerify: true
        # defaultIndex: kube-burner
        # type: elastic
      measurements:
        - name: podLatency
          esIndex: kube-burner

    jobs:
      - name: api-intensive
        jobIterations: 10
        qps: 4
        burst: 4
        namespacedIterations: true
        namespace: api-intensive
        podWait: false
        cleanup: true
        waitFor: []
        waitWhenFinished: true
        objects:
          - objectTemplate: /root/kube-burner/workloads/target-config/templates/deployment.yaml
            replicas: 1
          - objectTemplate: /root/kube-burner/workloads/target-config/templates/deployment.yaml
            replicas: 1
          - objectTemplate: /root/kube-burner/workloads/target-config/templates/deployment.yaml
            replicas: 1
          - objectTemplate: /root/kube-burner/workloads/target-config/templates/deployment.yaml
            replicas: 1

      - name: api-intensive-remove
        qps: 2
        burst: 2
        jobType: delete
        waitForDeletion: true
        objects:
          - kind: Deployment
            labelSelector: { kube-burner-job: api-intensive }
            apiVersion: apps/v1

      - name: ensure-pods-removal
        qps: 10
        burst: 10
        jobType: delete
        waitForDeletion: true
        objects:
          - kind: Pod
            labelSelector: { kube-burner-job: api-intensive }

      - name: remove-services
        qps: 2
        burst: 2
        jobType: delete
        waitForDeletion: true
        objects:
          - kind: Service
            labelSelector: { kube-burner-job: api-intensive }

      - name: remove-configmaps-secrets
        qps: 2
        burst: 2
        jobType: delete
        objects:
          - kind: ConfigMap
            labelSelector: { kube-burner-job: api-intensive }
          - kind: Secret
            labelSelector: { kube-burner-job: api-intensive }
  templates:
    - objectTemplate: templates/configmap.yaml
      content: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: configmap-{{.Replica}}
        data:
          data.yaml: |-
            a: 1
            b: 2
            c: 3
    - objectTemplate: templates/deployment.yaml
      content: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: api-intensive-{{.Replica}}
          labels:
            group: load
            svc: api-intensive-{{.Replica}}
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: api-intensive-{{.Replica}}
          template:
            metadata:
              labels:
                group: load
                name: api-intensive-{{.Replica}}
            spec:
              containers:
              - image: k8s.gcr.io/pause:3.1
                name: api-intensive-{{.Replica}}
                resources:
                  requests:
                    cpu: 10m
                    memory: 10M
                volumeMounts:
                  - name: configmap
                    mountPath: /var/configmap
                  - name: secret
                    mountPath: /var/secret
              dnsPolicy: Default
              terminationGracePeriodSeconds: 1
              # Add not-ready/unreachable tolerations for 15 minutes so that node
              # failure doesn't trigger pod deletion.
              tolerations:
              - key: "node.kubernetes.io/not-ready"
                operator: "Exists"
                effect: "NoExecute"
                tolerationSeconds: 900
              - key: "node.kubernetes.io/unreachable"
                operator: "Exists"
                effect: "NoExecute"
                tolerationSeconds: 900
              volumes:
                - name: configmap
                  configMap:
                    name: configmap-{{.Replica}}
                - name: secret
                  secret:
                    secretName: secret-{{.Replica}}
    - objectTemplate: templates/secret.yaml
      content: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: secret-{{.Replica}}
        type: Opaque
        data:
          password: Zm9vb29vb29vb29vb29vbwo=
    - objectTemplate: templates/service.yaml
      content: |
        apiVersion: v1
        kind: Service
        metadata:
          name: service-{{.Replica}} 
        spec:
          selector:
            name: api-intensive-{{.Replica}}
          ports:
          - port: 80
            targetPort: 80